apply plugin: 'com.android.library'

android {
    namespace "com.lt.logger"
    compileSdk rootProject.ext.compileSdk
    defaultConfig {
        minSdk rootProject.ext.minSdk
        targetSdk rootProject.ext.targetSdk
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            externalNativeBuild {
                ndk {
                    debugSymbolLevel "none"
                }
            }
        }

        debug {
            ndk {
                debugSymbolLevel "FULL"
            }

            externalNativeBuild {
                cmake {
                    cppFlags "-g"
                    cFlags "-g"
                }
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.22.1"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation("androidx.annotation:annotation:1.3.0")
}

afterEvaluate {
    android.libraryVariants.all { variant ->
        def capitalized = variant.name.capitalize()
        def srcLib = file("$buildDir/intermediates/cmake/${variant.name}/obj/armeabi-v7a/libmglogger.so")
        def destDir = file("$buildDir/intermediates/cmake/${variant.name}/obj/armeabi")

        def copyTask = tasks.register("copy${capitalized}ArmeabiLib", Copy) {
            from(srcLib)
            into(destDir)
            doFirst { destDir.mkdirs() }
            onlyIf { srcLib.exists() }
        }

        tasks.named("externalNativeBuild${capitalized}").configure {
            finalizedBy(copyTask)
        }

        if (variant.buildType.name == "release") {
            def extraStripTask = tasks.register("extraStrip${capitalized}") {
                dependsOn(copyTask)
                doLast {
                    def osName = org.gradle.internal.os.OperatingSystem.current()
                    def host = osName.isMacOsX() ? "darwin-x86_64" : (osName.isWindows() ? "windows-x86_64" : "linux-x86_64")
                    def llvmStrip = "${android.ndkDirectory}/toolchains/llvm/prebuilt/${host}/bin/llvm-strip"
                    ["armeabi", "armeabi-v7a", "arm64-v8a"].each { abi ->
                        def soFile = file("$buildDir/intermediates/cmake/${variant.name}/obj/${abi}/libmglogger.so")
                        if (soFile.exists()) {
                            project.exec { commandLine llvmStrip, "--strip-all", soFile }
                        }
                    }
                }
            }

            tasks.named("strip${capitalized}DebugSymbols").configure {
                finalizedBy(extraStripTask)
            }
        }
    }
}
